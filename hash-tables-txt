What is a hash table?

Hash table is a type of data structure that stores each value by linking it to a key , forming key-value pairs, just like javascript objects. 

What is hashing?
Hashing is the conversion from a string to a numerical index.


How does a hash table store data?

A hashing function is used to convert the key to a specific, fixed-length number (hash code). Once a hash table has a hash code it can use as a key, it can retrieve the key-value pair in its internal array.

How are hash tables and objects different?

Hash tables is a data structure used to implement an associate array , a a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots from which desired value can be found. In javascript we donâ€™t have built in hast table. In javascript arrays uses numbered indexes. 


Determine whether you would use a hash table or an object to store each of the following pieces of data:

A list of pets and their unique names.
hash table 
The name, age, and the birthday of your best friend.
-Object 
The name and location of every company in a given city.
-hash table 
All of the books checked out from a library by a particular individual.
-hash table 
The primary and secondary phone numbers for a contact.
-Object







Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

 
var makeHashTable = function(max) {
    var storage = [],
        hashTableMethods = {
            createHashIndex: function(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash+= key.charCodeAt(i)
                }

                return Math.abs(hash % max);
            },

            add: function(key, value) {
                if (key === undefined || value === undefined || key.length === 0 || value.length === 0)
                    throw ('Cannot add Undefined')
                else {
                    var hashIndex = this.createHashIndex(key);
                    storage[hashIndex] = value;
            
                }
                return this;
            },
            
            find: function(key) {
                var hashIndex = this.createHashIndex(key);
                return 'Phone Number: '+  key +',  Name:' +  storage[hashIndex][0]+ ' , Address: ' + storage[hashIndex][1] ;
            },

        };

    return hashTableMethods;
};

 

var contactsToAdd = {
    1234567890: ['John Smith','555 4th street'],
    5555555555: ['Jane Smith', '555 4th street'],
};

var contactsHash = makeHashTable(100);

for (var key in contactsToAdd) {
    contactsHash.add(key, contactsToAdd[key]);
}

contactsHash.add(9999, ['Ronald','1000 Greenland St']) 

console.log(contactsHash.find('1234567890'));
console.log(contactsHash.find(9999))

 







7 ) var makeHashTable = function(max) {

    var storage = [],
        hashTableMethods = {
            createHashIndex: function(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash+= key.charCodeAt(i)
                }
          
                return Math.abs(hash % max);
            },

            add: function(key, value) {
                if (key === undefined || value === undefined || key.length === 0 || value.length === 0)
                    throw ('Cannot add Undefined')
                else {
                    var hashIndex = this.createHashIndex(key);
                    storage[hashIndex] = value;
                }
                return this;
            },
            
            find: function(key) {
                var hashIndex = this.createHashIndex(key);
                return 'Inventory Barcodes: ' + key + ' '+ 'Item: ' + storage[hashIndex][0]+ ', In Stock:' + storage[hashIndex][1];
            },

        };

    return hashTableMethods;
};
var inventoryBarcodes = {
    454563456: ['Table Saw',200],
    781267: ['Cups', 100],
    45645644: ['Oil', 500],
    1234567897: ['Coke 20oz', 20],
    42784642: ['Drywall Screws 100ct',3],
};

var inventoryHash= makeHashTable(100)


for (var key in inventoryBarcodes){
  inventoryHash.add(key, inventoryBarcodes[key])
}

inventoryHash.add(12345,['Ice Cream', 10])
inventoryHash.find(12345)




8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

 let hash=( string, max)=> {
   var hash=0; 
   for(var i=0; i<string.length; i++){
     hash += string.charCodeAt(i);
   }
   return hash % max
 }

 class Newspaper{
   constructor(){
     this.storage=[];
     this.storageLimit=100;;
   }
  add(publisher, date){
    var key= publisher + date; 
    let index= hash(key, this.storageLimit)
    let data= [publisher,date];
    if(this.storage[index]===undefined){
      this.storage[index]= [ ]
    }
  this.storage[index].push(data)
 }

 find(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let result = [];
    
    if (!this.storage[index]) { 
      return 'No results were found for this search' 
      }
      this.storage[index].forEach(entry => {
       if (entry[0] === publisher && entry[1] === pubDate) { 
        result.push(entry); 
      }
    })
    return result;
  }
}



let news = new Newspaper();
news.add('Pragmatic Bookshelf', '2009');
news.add('xxxx', '1990');
news.add('St','2008');
 


console.log(news.find ('Pragmatic Bookshelf', '2009'));
console.log(news.find('Sns', '1990'));
 
 


 