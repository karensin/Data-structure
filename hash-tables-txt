What is a hash table?

Hash table is a type of data structure that stores each value by linking it to a key , forming key-value pairs, just like javascript objects. 

What is hashing?
Hashing is the conversion from a string to a numerical index.


How does a hash table store data?

A hashing function is used to convert the key to a specific, fixed-length number (hash code). Once a hash table has a hash code it can use as a key, it can retrieve the key-value pair in its internal array.

How are hash tables and objects different?

Hash tables is a data structure used to implement an associate array , a a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots from which desired value can be found. In javascript we donâ€™t have built in hast table. In javascript arrays uses numbered indexes. 


Determine whether you would use a hash table or an object to store each of the following pieces of data:

A list of pets and their unique names.
hash table 
The name, age, and the birthday of your best friend.
-Object 
The name and location of every company in a given city.
-hash table 
All of the books checked out from a library by a particular individual.
-hash table 
The primary and secondary phone numbers for a contact.
-Object



Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

  var makeHashTable = function(max) {
    var storage = [],
        hashTableMethods = {
            createHashIndex: function(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash+= key.charCodeAt(i)
                }

                return Math.abs(hash % max);
            },


            add_2: function(item) {
             
                if (false)
                    throw ('Cannot add Undefined')
                else {
                    var hashIndex = this.createHashIndex(item.phoneNumber);
                    storage[hashIndex] = item;
            
                }
                return this;
            },
             

            find_2: function(item) {
              
                var hashIndex = this.createHashIndex(item.phoneNumber);
                
                return storage[hashIndex];
            },

        };

    return hashTableMethods;
};



var foo = [
  {
  phoneNumber: '12312',
  name: 'John'
  },
  {
    phoneNumber: '1231234',
    name: 'John2'
  }
  ];

var contactsHash = makeHashTable(100);
 
foo.forEach((item) => {
contactsHash.add_2(item)
});

 

console.log(contactsHash.find_2({phoneNumber: '1231234'}));
 
 








7 )  var makeHashTable = function(max) {
    var storage = [],
        hashTableMethods = {
            createHashIndex: function(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash+= key.charCodeAt(i)
                }

                return Math.abs(hash % max);
            },


            add_2: function(key) {
             
                if (false)
                    throw ('Cannot add Undefined')
                else {
                    var hashIndex = this.createHashIndex(key.item);
                    storage[hashIndex] = key;
            
                }
                return this;
            },
             

            find_2: function(key) {
              
                var hashIndex = this.createHashIndex(key.item);
                
                return storage[hashIndex];
            },

        };

    return hashTableMethods;
};





var inventoryBarcodes = [
  { inventory: 100, 
    item: 'milk',
},
{
  inventory:20,
  item:'ice cream',
}
]

var inventoryHash= makeHashTable(100)

inventoryBarcodes.forEach((item)=>{
  inventoryHash.add_2(item)
})
 

 inventoryHash.find_2({item:'milk'})





8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
 var makeHashTable = function(max) {
    var storage = [],
        hashTableMethods = {
            createHashIndex: function(key) {
                var hash = 0;
                for (var i = 0; i < key.length; i++) {
                    hash+= key.charCodeAt(i)
                }

                return Math.abs(hash % max);
            },


            add_2: function(value) {
                var key= value.publisher +value.pubDate;
                if (false)
                    throw ('Cannot add Undefined')
                else {
                    var hashIndex = this.createHashIndex(key);
                    storage[hashIndex] = value;
            
                }
                return this;
            },
             

            find_2: function(value) {
                var key= value.publisher +value.pubDate;
                var hashIndex = this.createHashIndex(key);
 
                return storage[hashIndex];
            },

        };

    return hashTableMethods;
};





var newspaperLog = [
  { publisher: 'Karen', 
    pubDate: 2019,
    paper: 'abc'

},
{
  publisher: 'john', 
  pubDate: 1999,
  paper: 'dogs'

}
]

var newspaperHash= makeHashTable(100)

newspaperLog.forEach((item)=>{
  newspaperHash.add_2(item)
})
 

 newspaperHash.find_2(
   {publisher: 'Karen', 
    pubDate: '2019'}
    )


