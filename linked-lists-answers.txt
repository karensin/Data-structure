1) What are some pros and cons of using linked lists instead of array
It could be fast and efficient when you just want insert/delete from the beginning of the linked list 
However if you want to insert/delete a specific element in the end of the linked list that would take time and inefficient. 


Come up with a real world example of a linked list.

This could be an example of 

 
Programming Questions
You may program the following questions in any language of your choice (JavaScript, Ruby, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)

CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

New pseudocode 

CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head

WHILE  current.next does not exist
	SET current.next to node
END WHILE
END IF

END FUNCTION

LinkedList.prototype.push = function(val){
    var node = {
       value: val,
       next: null
    }
    if(!this.head){
      this.head = node;      
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }
        



Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

  function LinkedList(){
  this.head= null;
  this.length=0;
}	
 
LinkedList.prototype.push = function(val){  
    var node = {
       value: val,
       next: null
    }
	 if(!this.head){
      this.head = node;  
      this.length += 1;    
      return node;
    }
  else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
	 current.next= node;
	 this.length += 1; 
	 return node;
		}
	}	
 LinkedList.prototype.duplicate= function () {
	 if(!this.head || !this.head.next){
	   console.log('no duplicates found'); 
	   return;	
	 }

	 var thisNode= this.head; 
	 while (thisNode != null) {
	  var previousNode= thisNode; 
	  var nextNode= thisNode.next;	
    while (nextNode != null){
      if (thisNode.value== nextNode.value)
      {
        previousNode.next= nextNode.next;
        this.length --; 
	    }else {
	   previousNode= nextNode; 
	  }
	  nextNode= nextNode.next;
	  }
	  thisNode= thisNode.next;
	}
	  return this;
}


 list= new LinkedList()
 list.push(5) 
 list.push(5)
 list.push(4)
 list.push(1)
 list.push(2)
 list.duplicate()


3.Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a
function LinkedList(){
  this.head= null;
  this.length=0;
}

LinkedList.prototype.push = function(val){  
    var node = {
       value: val,
       next: null
    }
  
    if(!this.head){
      this.head = node;  
      this.length += 1;    
      return node;
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
      this.length += 1;
      return node;
    }
  }

LinkedList.prototype.duplicate = function(){
 if (!this.head || !this.head.next) {
      console.log("no duplicates");
  }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
          this.length --;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
    return this;
  }

LinkedList.prototype.reverse= function() {
    var previousNode = null;
    var thisNode = this.head;
 
    while (thisNode) {
     let nextNode = thisNode.next;
      thisNode.next = previousNode;
      previousNode = thisNode;
      thisNode = nextNode;
    }

     this.head = previousNode;
     return previousNode
  }



   
list= new LinkedList()
list.push(5);
list.push(3);
list.push(1);
list.push(4);
console.log(list)
list.reverse()







