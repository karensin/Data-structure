Exercises

1. What is the main difference between a stack and a queue?
	The stack data structure implements a last to arrive is fist to leave priority.  Specifically push is used to add element to the top of the stack and pop
while pop is to remove the top-most element. Queue on the other hand is to arrange data to avoid overwhelming amount of input. it responds to each request before another arrives applying quite to order the pending jobs.

2.What are the similarities between stacks and queues?

	They are both enqueuing and dequeuing data and they are not allowed to pick items from the middle of an array. 

3.Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
	
	I would be using the stack for UNDO because the last to arrive is the first to leave, meaning the newest entry will be removed. Where for REDO You pop the redo stack and push the popped command back into the undo stack.

Programming Questions


1.Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

 
 function reverseString(str) {
    return str.split("").reverse().join("");
}
 

2.Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

PSEDOCODE

CREATE Queue CONSTRUCTOR 
FUNCTION queue(element)	
	APPEND element to the end of the list
	Increment count
END FUNCTION 
FUNCTION pop 
	Decrement count
	SET temp to the last element 
	REMOVE last element of list from list 
	RETURN the length of the stack 
 
END FUNCTION 

FUNCTION count 
	return count 
END FUNCTION 
	



const Queue= function () {
	this.count=0; 
	this.storage={};

}
	Queue.prototype.enqueue = function (value) {
		if (value) {
      			this.storage[this.count] = value
   	 		this.count++
    			}
  	}
		
	Queue.prototype.pop= function(){
	if (this.count===0) {
	return undefined
	}
	
	this.count-â€”; 
	var result= this.storage[this.count];
	delete this.storage[this.count];
	return result
}
	Queue.prototype.size=function(){
		return this.count;
}


let newQueue = new Queue()
newQueue.enqueue("push")
newQueue.enqueue("pop")
newQueue.enqueue("delete")
newQueue.pop()


3.Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

CREATE Queue CONSTRUCTOR 
	DEFINE storage, count, lowestCount
FUNCTION queue (element) 
	APPEND element to the end of the list
	Increment count 
END FUNCTION 

FUNCTION dequeue 
	SET temp to the last element 
	REMOVE last element of list from list 
	Increment lowest count 
	RETURN temp 
END FUNCTION 

FUNCTION size 
	RETURN count minus lowest count
END FUNCTION



const Queue= function () {
	this.lowestCount=0;
	this.count=0; 
	this.storage={};

}
	Queue.prototype.enqueue= function (value) {
		if (value) {
			this.storage[this.count]= value 
			this.count++ 
		}
	}

	Queue.prototype.dequeue=function(){
		if(this.count-this.lowestCount===0) {
			return undefined
		}
		let result= this.storage[this.lowestCount]
		delete this.storage[this.lowestCount]
		this.lowestCount++ 
		return result
		}

	Queue.prototype.size=function(){
		return this.count-this.lowestCount
	}
