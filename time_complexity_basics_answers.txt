 What is time complexity and what is its relation to algorithms?

It is the amount of time taken by an algorithm to run as a function of the length of the string representing the input. The time complexity of an algorithm is commonly expressed using big O notation. 

What is runtime?

Runtime can refer to the physical time duration of an algorithm but is often used synonymously with time complexity.



How is the runtime of an algorithm calculated?

To determine the runtime of an algorithm, we have to add up the number of instructions the algorithm will execute as a function of the size of its input, then simplify the expressionn to the largest term and drop any constants. 




Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

Constant growth rate : o(1)
Logarithmic growth rate: O(log n) 
Linear growth rate: O(n) 
Log- linear growth rate: O( n log n) 
Quadratic growth rate: O (n^2)
Cubic Growth Rate:O(n^3)  
Exponential growth rate: O(2^n) 


Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Exponential Growth Rate- memorizing the multiplication table - in most cases, people do not memorize the entire multiplication in the first or second time. It takes a little more time but  with time you might figured out and have it memorized. 





Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

```
FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION
Determine the time complexity of the following snippet of code.
```

A: Linear growth rate: O(n) 

If you get stuck, read through the graphical representation section again.
```
FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION
```

A: Quadratic growth rate: O (n^2)


Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: Exponential growth rate: O(2^n) 


Out of the code snippets you just saw, which is the most time efficient?

A: Linear growth rate: O(n) 
